name: 'Build and Push Docker Images Pipeline'

on:
  push:
    # multiarch test branch only
    branches: [ multiarch ]
  workflow_dispatch:

jobs:

  versioninfo:

    name: 'Get Version Information'
    runs-on: ubuntu-latest

    outputs:
      SemVer2: ${{ steps.nbgv.outputs.SemVer2 }}
      AssemblyVersion: ${{ steps.nbgv.outputs.AssemblyVersion }}
      AssemblyFileVersion: ${{ steps.nbgv.outputs.AssemblyFileVersion }}
      AssemblyInformationalVersion: ${{ steps.nbgv.outputs.AssemblyInformationalVersion }}

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: 'Checkout Code'
        uses: actions/checkout@v3
        with:
          # Get all history for version calculation
          fetch-depth: 0

      # Run Nerdbank.GitVersioning
      # https://github.com/marketplace/actions/nerdbank-gitversioning
      - name: 'Run Nerdbank.GitVersioning Tool'
        id: nbgv
        uses: dotnet/nbgv@master

  buildpush:

    name: 'Build and Push Docker Images'
    runs-on: ubuntu-latest
    needs: versioninfo

    env:
      docker-path: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/plexcleaner
      ghcr-path: ghcr.io/${{ github.repository_owner }}/plexcleaner

    strategy:
      matrix:
        include:

          # Debian: linux/amd64,linux/arm64,linux/arm/v7
          - file: ./Docker/Debian.dotNET.Dockerfile
            platforms: linux/amd64,linux/arm64,linux/arm/v7
            secrets: 'null'
            tags: |
              $docker-path:${{ endsWith(github.ref, 'refs/heads/main') && 'debian' || 'debian-develop' }}
              $ghcr-path:${{ endsWith(github.ref, 'refs/heads/main') && 'debian' || 'debian-develop' }}

          # Alpine: linux/amd64,linux/arm64
          - file: ./Docker/Alpine.dotNET.Dockerfile
            platforms: linux/amd64,linux/arm64
            secrets: 'null'
            tags: |
              $docker-path:${{ endsWith(github.ref, 'refs/heads/main') && 'alpine' || 'alpine-develop' }}
              $ghcr-path:${{ endsWith(github.ref, 'refs/heads/main') && 'alpine' || 'alpine-develop' }}

          # Ubuntu: linux/amd64
          - file: ./Docker/Ubuntu.dotNET.Savoury.Dockerfile
            platforms: linux/amd64
            # "savoury_ppa_auth=${{ secrets.SAVOURY_PPA_AUTH }}"
            secrets: SAVOURY_PPA_AUTH
            tags: |
              $docker-path:${{ endsWith(github.ref, 'refs/heads/main') && 'savoury' || 'savoury-develop' }}
              $docker-path:${{ endsWith(github.ref, 'refs/heads/main') && 'latest' || 'develop' }}
              $docker-path:${{ needs.versioninfo.outputs.SemVer2 }}
              $ghcr-path:${{ endsWith(github.ref, 'refs/heads/main') && 'savoury' || 'savoury-develop' }}
              $ghcr-path:${{ endsWith(github.ref, 'refs/heads/main') && 'latest' || 'develop' }}
              $ghcr-path:${{ needs.versioninfo.outputs.SemVer2 }}

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      # Setup QEMU for multi architecture builds
      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: 'Setup QEMU'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Setup docker build
      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Login to Docker Hub
      # https://github.com/marketplace/actions/docker-login
      - name: 'Login to Docker Hub'
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Login to GitHub Container Registry
      # https://github.com/marketplace/actions/docker-login
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker build and push
      # https://github.com/marketplace/actions/build-and-push-docker-images

      # Matrix build
      - name: 'Docker Build and Push'
        uses: docker/build-push-action@v4
        with:
          file: ${{ matrix.file }}
          push: ${{ (github.event_name != 'pull_request') }}
          secrets: ${{ matrix.secrets }}=${{ secrets[matrix.secrets] }}
          tags: ${{ matrix.tags }}
          context: .
          platforms: ${{ matrix.platforms }}
          build-args: |
            LABEL_VERSION=${{ needs.versioninfo.outputs.SemVer2 }}
            BUILD_CONFIGURATION=${{ endsWith(github.ref, 'refs/heads/main') && 'Release' || 'Debug' }}
            BUILD_VERSION=${{ needs.versioninfo.outputs.AssemblyVersion }}
            BUILD_FILE_VERSION=${{ needs.versioninfo.outputs.AssemblyFileVersion }}
            BUILD_ASSEMBLY_VERSION=${{ needs.versioninfo.outputs.AssemblyFileVersion }}
            BUILD_INFORMATION_VERSION=${{ needs.versioninfo.outputs.AssemblyInformationalVersion }}
            BUILD_PACKAGE_VERSION=${{ needs.versioninfo.outputs.SemVer2 }}

  # Update Docker Hub description
  hubdescription:

    name: 'Update Docker Hub Description'
    runs-on: ubuntu-latest
    needs: buildpush

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      # https://github.com/marketplace/actions/docker-hub-description
      - name: 'Update Docker Hub Description'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: ptr727/plexcleaner
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./Docker/README.md

  # Create a custom badge to report the build date
  # Run this job at the end of the pipeline
  datebadge:

    name: 'Build Date Badge'
    runs-on: ubuntu-latest
    needs: buildpush

    steps:

      # Get date from environment as a variable
      - id: date
        run: |
          echo "date=$(date)" >> $GITHUB_OUTPUT

      # Create badge
      # https://github.com/marketplace/actions/bring-your-own-badge
      - name: 'Build Date Badge'
        uses: RubbaBoy/BYOB@v1
        with:
          NAME: lastbuild
          LABEL: "Last Build"
          ICON: "github"
          STATUS: ${{ steps.date.outputs.date }}
          COLOR: "blue"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
