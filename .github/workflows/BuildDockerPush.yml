name: Build and push docker images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * MON'
  
jobs:

  # Get version information
  versioninfo:

    name: Get version information
    runs-on: ubuntu-latest

    outputs:
      SemVer2: ${{ steps.nbgv.outputs.SemVer2 }}
      AssemblyVersion: ${{ steps.nbgv.outputs.AssemblyVersion }}
      AssemblyFileVersion: ${{ steps.nbgv.outputs.AssemblyFileVersion }}
      AssemblyInformationalVersion: ${{ steps.nbgv.outputs.AssemblyInformationalVersion }}

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Get all history for version calculation
          fetch-depth: 0

      # Run Nerdbank.GitVersioning
      # https://github.com/marketplace/actions/nerdbank-gitversioning
      - name: Run Nerdbank.GitVersioning tool
        id: nbgv
        uses: dotnet/nbgv@master

  # Build and push docker images
  buildpush:

    name: Build and push docker images
    runs-on: ubuntu-latest
    needs: versioninfo

    # TODO: How do I use secrests in a matrix?
    # ${{ secrets.DOCKER_HUB_USERNAME }}
    # ${{ github.repository_owner }}
    # Warning: Skip output 'DockerPath' since it may contain secret.
    # Warning: Skip output 'GhcrPath' since it may contain secret.

    strategy:

      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
      matrix:
        include:

          # Debian: linux/amd64,linux/arm64,linux/arm/v7
          - file: ./Docker/Debian.dotNET.Dockerfile
            platforms: linux/amd64,linux/arm64,linux/arm/v7
            secrets: SAVOURY_PPA_AUTH
            tags: |
              docker.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'debian' || 'debian-develop' }}
              ghcr.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'debian' || 'debian-develop' }}

          # Alpine: linux/amd64,linux/arm64
          - file: ./Docker/Alpine.dotNET.Dockerfile
            platforms: linux/amd64,linux/arm64
            secrets: SAVOURY_PPA_AUTH
            tags: |
              docker.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'alpine' || 'alpine-develop' }}
              ghcr.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'alpine' || 'alpine-develop' }}

          # Ubuntu: linux/amd64
          - file: ./Docker/Ubuntu.dotNET.Savoury.Dockerfile
            platforms: linux/amd64
            # "SAVOURY_PPA_AUTH=${{ secrets.SAVOURY_PPA_AUTH }}"
            secrets: SAVOURY_PPA_AUTH
            tags: |
              docker.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'savoury' || 'savoury-develop' }}
              docker.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'latest' || 'develop' }}
              docker.io/ptr727/plexcleaner:${{ needs.versioninfo.outputs.SemVer2 }}
              ghcr.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'savoury' || 'savoury-develop' }}
              ghcr.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'latest' || 'develop' }}
              ghcr.io/ptr727/plexcleaner:${{ needs.versioninfo.outputs.SemVer2 }}

          # Arch: linux/amd64
          - file: ./Docker/Arch.Dockerfile
            platforms: linux/amd64
            secrets: SAVOURY_PPA_AUTH
            tags: |
              docker.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'arch' || 'arch-develop' }}
              ghcr.io/ptr727/plexcleaner:${{ endsWith(github.ref, 'refs/heads/main') && 'arch' || 'arch-develop' }}

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3

      # Setup QEMU for multi architecture builds
      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Setup docker build
      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Login to Docker Hub
      # https://github.com/marketplace/actions/docker-login
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Login to GitHub Container Registry
      # https://github.com/marketplace/actions/docker-login
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker build and push
      # https://github.com/marketplace/actions/build-and-push-docker-images

      # Matrix build
      - name: Docker build and push
        uses: docker/build-push-action@v4
        with:
          file: ${{ matrix.file }}
          push: ${{ (github.event_name != 'pull_request') }}
          # TODO: How to test for secret not null and avoid "null= is not a valid secret"
          secrets: ${{ matrix.secrets }}=${{ secrets[matrix.secrets] }}
          tags: ${{ matrix.tags }}
          context: .
          platforms: ${{ matrix.platforms }}
          build-args: |
            LABEL_VERSION=${{ needs.versioninfo.outputs.SemVer2 }}
            BUILD_CONFIGURATION=${{ endsWith(github.ref, 'refs/heads/main') && 'Release' || 'Debug' }}
            BUILD_VERSION=${{ needs.versioninfo.outputs.AssemblyVersion }}
            BUILD_FILE_VERSION=${{ needs.versioninfo.outputs.AssemblyFileVersion }}
            BUILD_ASSEMBLY_VERSION=${{ needs.versioninfo.outputs.AssemblyFileVersion }}
            BUILD_INFORMATION_VERSION=${{ needs.versioninfo.outputs.AssemblyInformationalVersion }}
            BUILD_PACKAGE_VERSION=${{ needs.versioninfo.outputs.SemVer2 }}

  # Get tool versions in image
  toolversions:

    name: Get tool versions in image
    runs-on: ubuntu-latest
    needs: buildpush

    strategy:

      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
      matrix:
        include:
          - tag: ${{ endsWith(github.ref, 'refs/heads/main') && 'debian' || 'debian-develop' }}
            file: debian.ver
          - tag: ${{ endsWith(github.ref, 'refs/heads/main') && 'alpine' || 'alpine-develop' }}
            file: alpine.ver
          - tag: ${{ endsWith(github.ref, 'refs/heads/main') && 'savoury' || 'savoury-develop' }}
            file: savoury.ver
          - tag: ${{ endsWith(github.ref, 'refs/heads/main') && 'arch' || 'arch-develop' }}
            file: arch.ver

    steps:

    # https://github.com/marketplace/actions/checkout      
    - name: Checkout
      uses: actions/checkout@v3
  
    # https://github.com/marketplace/actions/docker-run-action
    - name: Write image tool versions to file
      uses: addnab/docker-run-action@v3
      with:
        image: docker.io/ptr727/plexcleaner:${{ matrix.tag }}
        options: --volume ${{ runner.temp }}/versions:/versions
        run: |
          echo PlexCleaner: $(/PlexCleaner/PlexCleaner --version) > /versions/${{ matrix.file }}
          echo dotNET: $(dotnet --version) >> /versions/${{ matrix.file }}
          echo HandBrakeCLI: $(HandBrakeCLI --version) >> /versions/${{ matrix.file }}
          echo MediaInfo: $(mediainfo --version) >> /versions/${{ matrix.file }}
          echo MkvMerge: $(mkvmerge --version) >> /versions/${{ matrix.file }}
          echo FfMpeg: $(ffmpeg -version) >> /versions/${{ matrix.file }}

    - name: Print versions
      run: cat ${{ runner.temp }}/versions/${{ matrix.file }}

    # https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload version artifacts
      uses: actions/upload-artifact@v3
      with:
        name: versions
        path: ${{ runner.temp }}/versions/${{ matrix.file }}

  # Update Docker README.md
  updatereadme:

    name: Update docker README.md
    runs-on: ubuntu-latest
    needs: toolversions

    steps:

    # https://github.com/marketplace/actions/checkout      
    - name: Checkout 
      uses: actions/checkout@v3

    # https://github.com/marketplace/actions/download-a-build-artifact
    - name: Download version artifacts
      uses: actions/download-artifact@v3
      with:
        name: versions
        path: ${{ runner.temp }}/versions

    - name: Create README.md from README.m4
      run: m4 --include=${{ runner.temp }}/versions ./Docker/README.m4 > ./Docker/README.md

    # https://github.com/marketplace/actions/git-auto-commit
    - name: Commit generated README.md
      uses: stefanzweifel/git-auto-commit-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file_pattern: ./Docker/README.md
        commit_message: Update generated README.md

  # Update Docker Hub description
  hubdescription:

    name: Update Docker Hub README.md
    runs-on: ubuntu-latest
    needs: updatereadme

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3

      # https://github.com/marketplace/actions/docker-hub-description
      - name: Update Docker Hub README.md
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: ptr727/plexcleaner
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./Docker/README.md

  # Create a custom badge to report the build date
  datebadge:

    name: Build date badge
    runs-on: ubuntu-latest
    needs: buildpush

    steps:

      # Get date from environment as a variable
      - id: date
        run: |
          echo "date=$(date)" >> $GITHUB_OUTPUT

      # Create badge
      # https://github.com/marketplace/actions/bring-your-own-badge
      - name: Build date badge
        uses: RubbaBoy/BYOB@v1
        with:
          name: lastbuild
          label: "Last Build"
          icon: "github"
          status: ${{ steps.date.outputs.date }}
          color: "blue"
          github_token: ${{ secrets.GITHUB_TOKEN }}
